---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  labels:
    app: haproxy
data:
  haproxy.cfg: |
    global
      log stdout format raw local0
      daemon

    defaults
      mode http
      log global
      option httplog
      timeout connect 5s
      timeout client  60s
      timeout server  60s

    # Expose a simple health endpoint on /healthz
    frontend http_front
      bind *:8080
      acl is_health path_beg /healthz
      http-request return status 200 content-type text/plain string "ok" if is_health
      default_backend web_backends

    backend web_backends
      balance roundrobin
      option httpchk GET /
      http-check expect status 200-399
      # Use cluster DNS for dynamic resolution (adjust IP if your cluster DNS differs)
      resolvers osdns
        nameserver dns1 172.30.0.10:53  # OpenShift default cluster-dns
        hold valid 10s
        resolve_retries       3
        timeout resolve       5s
        timeout retry         5s
      # General health-check settings
      default-server check inter 3s fall 2 rise 2 init-addr last,libc,none

      # --- HTTPS backends via OpenShift Routes ---
      # We connect to 443 with SNI set to each route host. We skip cert validation since these are public route certs that may rotate.
      server s1 myapp-route-wirajayaabadi-dev.apps.rm2.thpm.p1.openshiftapps.com:443 ssl verify none sni str(myapp-route-wirajayaabadi-dev.apps.rm2.thpm.p1.openshiftapps.com) resolvers osdns
      server s2 myapp-route-biruswasana-dev.apps.rm1.0a51.p1.openshiftapps.com:443 ssl verify none sni str(myapp-route-biruswasana-dev.apps.rm1.0a51.p1.openshiftapps.com) resolvers osdns
      server s3 myapp-route-fchbrnn-dev.apps.rm1.0a51.p1.openshiftapps.com:443 ssl verify none sni str(myapp-route-fchbrnn-dev.apps.rm1.0a51.p1.openshiftapps.com) resolvers osdns
      server s4 myapp-route-dianmatondang012-dev.apps.rm1.0a51.p1.openshiftapps.com:443 ssl verify none sni str(myapp-route-dianmatondang012-dev.apps.rm1.0a51.p1.openshiftapps.com) resolvers osdns
      server s5 myapp-route-rafyryana-dev.apps.rm1.0a51.p1.openshiftapps.com:443 ssl verify none sni str(myapp-route-rafyryana-dev.apps.rm1.0a51.p1.openshiftapps.com) resolvers osdns

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy
  labels:
    app: haproxy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      containers:
        - name: haproxy
          image: haproxy:2.9-alpine
          imagePullPolicy: IfNotPresent
          args: ['-f', '/usr/local/etc/haproxy/haproxy.cfg', '-db']
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - name: haproxy-config
              mountPath: /usr/local/etc/haproxy
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: haproxy-config
          configMap:
            name: haproxy-config
            items:
              - key: haproxy.cfg
                path: haproxy.cfg
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy
  labels:
    app: haproxy
spec:
  selector:
    app: haproxy
  ports:
    - name: http
      port: 8080
      targetPort: 8080
---
# Optional: expose via OpenShift Route (edge-terminated TLS to HAProxy service)
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: haproxy
  labels:
    app: haproxy
spec:
  # host: custom-haproxy.<your-domain>   # (optional) set a custom host if you want a fixed URL
  to:
    kind: Service
    name: haproxy
  port:
    targetPort: http
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
